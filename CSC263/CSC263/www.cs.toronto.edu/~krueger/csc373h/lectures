<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<HTML LANG="en">
<HEAD>
<TITLE>CSC 373 Winter 2006</TITLE>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta HTTP-EQUIV="Pragma" CONTENT="no-cache">
</HEAD>

<BODY bgcolor="#FBFBF0" LINK="#0000AA" VLINK="#602000">

<H1><a href="..">CSC 373</a>: Lectures</H1>

<table border="1" cellpadding="3">

<tr>
<th>Week</th>
<th>Topics</th>
<th>Readings</th>
<th>Tutorial</th>
<th>Notes</th>
</tr>

<tr>
  <td align="center">1</td>
  <td>Course Introduction<br>
    Greedy algorithms for interval scheduling<br>
    "staying ahead" proof technique</td>
  <td>Section 4.1</td>
  <td><i>no tutorial held</i></td>
  <td><a href="lec01.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">2</td>
  <td>Greedy algorithms: interval scheduling, MSTs<br>
    Exchange proof technique</td>
  <td>Section 4.5, 4.4</td>
  <td>Dijkstra's shortest-path algorithm</td>
  <td><a href="lec02.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">3</td>
  <td>Greedy algorithms: MST, Knapsack<br>
    Introduction to dynamic programming</td>
  <td>Section 11.8</td>
  <td>Making change (in Canada)</td>
  <td><a href="lec03.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">4</td>
  <td>Dynamic programming: rock climber's problem,<br>matrix chaining</td>
  <td>Section 6.1, 6.2</td>
  <td>Making change (in general)</td>
  <td><a href="lec04.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">5</td>
  <td>Dynamic programming: weighted interval scheduling<br>
  all-pairs shortest paths</td>
  <td>Section 6.8, 6.6</td>
  <td>All-pairs shortest paths</td>
  <td><a href="lec05.txt">lecture summary</a><br>
  <a href="tut05.txt">tutorial summary</a></td>
</tr>

<tr>
  <td align="center">6</td>
  <td><a href="../tests">Term Test 1</a><br>RNA secondary structure</td>
  <td>study!<br>
    (reference Section 6.5)</td>
  <td>Test review, DP review</td>
  <td><a href="lec06.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">7</td>
  <td>Introduction to divide-and-conquer:<br>
  integer multiplication, Master Theorem, sorting</td>
  <td>Section 5.1, 5.3, 5.5</td>
  <td>Sequence alignment (DP, D&amp;C)</td>
  <td><a href="lec07.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">--</td>
  <td align="center" colspan=3><i>Reading week - no class</i></td>
</tr>

<tr>
  <td align="center">8</td>
  <td>Divide-and-conquer: selection, closest points<br>
    Network flow introduction</td>
  <td>Section 7.1, 7.2</td>
  <td>Sequence alignment (D&amp;C)</td>
  <td><a href="lec08.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">9</td>
  <td>Network flow and augmenting paths</td>
  <td>Section 7.3, 7.11</td>
  <td>Solving problems with network flow</td>
  <td><a href="lec09.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">10</td>
  <td>Network flow: project selection<br>Linear programming</td>
  <td>Section 7.11, 11.6</td>
  <td>Assignment review, network flow review</td>
  <td><a href="lec10.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">11</td>
  <td><a href="../tests">Term Test 2</a><br>
  Linear programming formulation: political problem</td>
  <td>study!</td>
  <td>Test review, LP formulation,<br>blending problem</td>
  <td><a href="lec11.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">12</td>
  <td>Linear programming: vertex cover as an IP<br>
    Approximation algorithms: vertex cover, TSP</td>
  <td>Section 11.6, 11.1</td>
  <td>Simple knapsack, load balancing</td>
  <td><a href="lec12.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">13</td>
  <td>Approximation algorithms<br>
  Randomized algorithms</td>
  <td>Section 11.3, 13.1</td>
  <td>Randomization; simplex method for LP</td>
  <td><a href="lec13.txt">lecture summary</a></td>
</tr>

<tr>
  <td align="center">--</td>
  <td align="center" colspan=3><i>Final exams -- April 17-29 --
  <a href="http://www.utm.utoronto.ca/~w3reg/timetable/cal_pub.php">check exam schedule</a></i></td>
</tr>

<!--
<ol>
  <li>Section(s) 4.1.</li>
  <li>Section(s) 4.5, 4.4.</li>
  <li>Section(s) 11.8.</li>
  <li>Section(s) 5.1, 5.2.</li>
  <li>Section(s) 5.7.</li>
  <li>Section(s) 5.5, 6.1.</li>
  <li>Section(s) 6.1, 6.3, 6.5.</li>

  <li>Section(s) 7.1, 7.2, 7.3.</li>

  <li>Section(s) 7.3, 7.10.</li>
  <li>Section(s) 7.10, 11.6.</li>
  <li>Section(s) 11.6, 11.1.</li>
  <li>Section(s) 11.1, 11.3.</li>
  <li>Section(s) 11.3, 13.1.</li>
</ol>
-->

</table>

<p>
All readings are from the course textbook,
Kleinberg and Tardos,
<a href="http://www.aw-bc.com/info/kleinberg/">Algorithm Design</a>.
</p>
<p>
Some topics are also covered in Cormen, Leiserson, Rivest and Stein,
Introduction to Algorithms (2nd edition), McGraw-Hill (2001).
I am told that CLRS may be available free to UofT students through the
library website.
</p>
<p>
Many of the lecture notes included here are adapted from Francois Pitt's
CSC 373 notes.
</p>

<a name="outline"></a>
<h2>Course outline</h2>

<h3>Lecture/tutorial topics</h3>
<p>
The following topics will be covered in this course,
probably in the order listed.
For each topic,
the approximate number of weeks required to cover that topic is listed
as well as a list of the relevant sections in the textbook.
</p>

<ul>
  <li>Greedy algorithms (Chapter 4): 2.5 weeks.</li>
  <li>Dynamic programming (Chapter 6): 2.5 weeks.</li>
  <li>Divide and conquer (Chapter 5): 2 weeks.</li>
  <li>Network flow (Chapter 7): 2 weeks.</li>
  <li>Linear programming (Section 11.6): 1 week.</li>
  <li>Approximation and randomized algorithms
      (parts of Chapters 11 and 13): 2 weeks.</li>
</ul>

<h3>Learning objectives</h3>
<p>
By the end of this course, students should
be familiar with standard algorithm design techniques
(divide-and-conquer, greedy strategies, dynamic programming,
linear programming, randomization):
</p>
<ul>
  <li>know the definitions of the various techniques,</li>
  <li>be able to recognize algorithms that employ these techniques,</li>
  <li>be able to write algorithms using these techniques,</li>
  <li>understand what it means for algorithms written
      using these techniques to be correct, and</li>
  <li>be able to analyze the efficiency of algorithms
      written using these techniques.</li>
</ul>

<HR>

<TABLE width="100%">
<TR>
<TD>
<SMALL>
<!--Copyright &#169;
Richard Krueger
<BR>
All rights reserved.
<BR>-->
<SCRIPT TYPE="text/JavaScript">
<!--
if (Date.parse(document.lastModified) != 0)
        document.write('<BR>Last update: ' + document.lastModified);
//-->
</SCRIPT>
</SMALL>
</TD>
<TD align=right>
    <a href="http://validator.w3.org/check?uri=referer"><img border="0"
        src="http://www.w3.org/Icons/valid-html401"
        alt="Valid HTML 4.01 Transitional" height="31" width="88"></a>
</TD>
</TR>
</TABLE>

</BODY>
</HTML>
