Script started on Sat Mar 25 01:33:25 2017
[1m[3m%[23m[1m[0m                                                                                                                                                                  [0m[23m[24m[J[44mwangpeiq@wolf[49m [1m[36m~/csc209/ex10[37m % [0m[39m[49m[K[?1h=ggdb bufserver[1m [0m[0m [?1l>
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bufserver...done.
(gdb) b main
Breakpoint 1 at 0x400adc: file bufserver.c, line 70.
(gdb) r 
Starting program: /h/u13/c6/00/wangpeiq/csc209/ex10/bufserver 

Breakpoint 1, main () at bufserver.c:70
70	int main() {
(gdb) n
82	  listenfd = setup();
(gdb) n
Listening on 52561
84	    socklen = sizeof(peer);
(gdb) n
88	    if ((fd = accept(listenfd, (struct sockaddr *)&peer, &socklen)) < 0) {
(gdb) n
n 92	      printf("New connection on port %d\n", ntohs(peer.sin_port));
(gdb) p s fd
$1 = 4
(gdb) p per er
$2 = {sin_family = 2, sin_port = 46253, sin_addr = {s_addr = 16777343}, sin_zero = "\000\000\000\000\000\000\000"}
(gdb) p   p listenfd
$3 = 3
(gdb) n n
New connection on port 44468
95	      inbuf = 0;          // buffer is empty; has no bytes
(gdb) n
96	      room = sizeof(buf); // room == capacity of the whole buffer
(gdb) p room
$4 = 32767
(gdb) n p buf
$5 = '\000' <repeats 16 times>, "\200\f@\000\000\000\000\000`\b@\000\000"
(gdb) p buf       n
97	      after = buf;        // start writing at beginning of buf
(gdb) n
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) p inbuf
$6 = 6
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) p where
$7 = -1
(gdb) n n
inbuf = [6], room = [30]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
134	        room = 30 - inbuf;
(gdb) n
135	        after = buf + inbuf; 
(gdb) p room
$8 = 24
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [6], room = [24]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) p inf buf
$9 = 10
(gdb) p where
$10 = -1
(gdb) n
inbuf = [10], room = [24]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
134	        room = 30 - inbuf;
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [10], room = [20]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) p inbuf
$11 = 15
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) p where
$12 = -1
(gdb) n
inbuf = [15], room = [20]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
134	        room = 30 - inbuf;
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [15], room = [15]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) p inbuf
$13 = 18
(gdb) p w     n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) p where
$14 = 16
(gdb) n
inbuf = [18], room = [15]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
115	          *(buf + where) = '\0';
(gdb) n
117	          printf("Next message: %s\n", buf);
(gdb) buf
Undefined command: "buf".  Try "help".
(gdb) p buf
$15 = "A stitch in time\000\n@\000\000\000\000\000`\b@\000\000"
(gdb) n
Next message: A stitch in time
124	          inbuf = inbuf - where - 2;
(gdb) n
125	          memset(&buf, '\0', where + 2);        // clear buf before and inlcuding \r\n
(gdb) p inbuf
$16 = 0
(gdb) n
130	          memmove(buf, buf + where + 2, 30 - where - 2);
(gdb) p buf
$17 = '\000' <repeats 18 times>, "@\000\000\000\000\000`\b@\000\000"
(gdb) n
134	        room = 30 - inbuf;
(gdb) p buf
$18 = "@\000\000\000\000\000`\b@\000\000\000\000\000\000\000\000\000@\000\000\000\000\000`\b@\000\000"
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [0], room = [30]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) p n after
$19 = 0x7fffffffe490 "A stit`\b@"
(gdb) p buf
$20 = "A stit`\b@\000\000\000\000\000\000\000\000\000@\000\000\000\000\000`\b@\000\000"
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [6], room = [30]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
134	        room = 30 - inbuf;
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [6], room = [24]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [9], room = [24]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
134	        room = 30 - inbuf;
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) 'n
Undefined command: "".  Try "help".
(gdb) on  n
inbuf = [9], room = [21]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
n
101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [13], room = [21]
107	        if (where >= 0) { // OK. we have a full line
(gdb) n
134	        room = 30 - inbuf;
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [13], room = [17]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
n 101	        inbuf += nbytes;
(gdb) n
104	        where = find_network_newline(buf, inbuf);
(gdb) n
106	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [18], room = [17]
107	        if (where >= 0) { // OK. we have a full line
(gdb) p buf   where
$21 = 16
(gdb) p buf
$22 = "A stitch in time\r\n@\000\000\000\000\000`\b@\000\000"
(gdb) n
115	          *(buf + where) = '\0';
(gdb) n p buf
$23 = "A stitch in time\r\n@\000\000\000\000\000`\b@\000\000"
(gdb) n
117	          printf("Next message: %s\n", buf);
(gdb) p buf
$24 = "A stitch in time\000\n@\000\000\000\000\000`\b@\000\000"
(gdb) n
Next message: A stitch in time
124	          inbuf = inbuf - where - 2;
(gdb) n
125	          memset(&buf, '\0', where + 2);        // clear buf before and inlcuding \r\n
(gdb) p inbuf
$25 = 0
(gdb) n
130	          memmove(buf, buf + where + 2, 30 - where - 2);
(gdb) p buf
$26 = '\000' <repeats 18 times>, "@\000\000\000\000\000`\b@\000\000"
(gdb) n
134	        room = 30 - inbuf;
(gdb) p buf
$27 = "@\000\000\000\000\000`\b@\000\000\000\000\000\000\000\000\000@\000\000\000\000\000`\b@\000\000"
(gdb) n
135	        after = buf + inbuf; 
(gdb) n
137	        printf("inbuf = [%d], room = [%d]\n", inbuf, room);
(gdb) n
inbuf = [0], room = [30]
99	      while ((nbytes = read(fd, after, room)) > 0) {
(gdb) n
^C
Program received signal SIGINT, Interrupt.
0x00007ffff7b00f20 in __read_nocancel () at ../sysdeps/unix/syscall-template.S:81
81	../sysdeps/unix/syscall-template.S: No such file or directory.
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) q
A debugging session is active.

	Inferior 1 [process 31533] will be killed.

Quit anyway? (y or n) y
[1m[3m%[23m[1m[0m                                                                                                                                                                  [0m[23m[24m[J[44mwangpeiq@wolf[49m [1m[36m~/csc209/ex10[37m % [0m[39m[49m[K[?1h=eexit[?1l>

Script done on Sat Mar 25 01:49:49 2017
