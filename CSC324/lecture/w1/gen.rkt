#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1317 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 107
(
 #"#reader(lib \"2017-fall-reader.rkt\" \"csc104\")((modname w1) (compt"
 #"hink-settings #hash((prefix-types? . #f))))"
) 0 0 4 29 1 #"\n"
0 0 17 3 17 #"; define an image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #" ("
0 0 14 3 8 #"triangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"image?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")    "
0 0 17 3 7 #"; #true"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; stack is a function"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; upon calling, an-image is substituted with the argument to functio"
 #"n"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 8 #"an-image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 8 #"an-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 8 #"an-image"
0 0 24 3 1 #" "
0 0 14 3 8 #"an-image"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; doesnt work... cannot make custom define function"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; because function call behaves the same way in every circumstances"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; evaluates argument expression, then calls the function with values"
 #"!"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 19 #"our-define x value)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 7 #"value))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; define: "
0 0 17 3 5 #"found"
0 0 17 3 1 #" "
0 0 17 3 2 #"a "
0 0 17 3 10 #"definition"
0 0 17 3 1 #" "
0 0 17 3 12 #"that is not "
0 0 17 3 3 #"at "
0 0 17 3 4 #"the "
0 0 17 3 3 #"top"
0 0 17 3 6 #" level"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; and"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; is"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 9 #" function"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; has special meaning... since prevent second from evaluated if firs"
 #"t is false"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";\342\230\205 ("
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"3))"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";\342\200\242 ("
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 8 #"#false ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"3))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";\342\200\242 #false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; my-and"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; is a function"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; does"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 4 #"have"
0 0 17 3 1 #" "
0 0 17 3 7 #"special"
0 0 17 3 1 #" "
0 0 17 3 7 #"meaning"
0 0 17 3 1 #","
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; since"
0 0 17 3 1 #" "
0 0 17 3 4 #"both"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 9 #"evaluated"
0 0 17 3 1 #" "
0 0 17 3 6 #"before"
0 0 17 3 1 #" "
0 0 17 3 12 #"substitution"
0 0 17 3 1 #" "
0 0 17 3 4 #"into"
0 0 17 3 9 #" function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"my-and"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"my-and"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\230\205"
0 0 17 3 2 #" ("
0 0 17 3 6 #"my-and"
0 0 17 3 1 #" "
0 0 17 3 6 #"#false"
0 0 17 3 1 #" "
0 0 17 3 6 #"#true)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 7 #" #false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; OK, SINCE short-circuiting comes into play"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 3 3 #" ( "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\230\205"
0 0 17 3 2 #" ("
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 1 #"/"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"0))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 6 #"#false"
0 0 17 3 2 #" ("
0 0 17 3 1 #"/"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"0))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 7 #" #false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; ERROR! will fail to substitute since second expression fails (deno"
 #"minator cant be 0)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"my-and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\230\205"
0 0 17 3 2 #" ("
0 0 17 3 6 #"my-and"
0 0 17 3 2 #" ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 1 #"/"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"0))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 6 #"my-and"
0 0 17 3 1 #" "
0 0 17 3 6 #"#false"
0 0 17 3 2 #" ("
0 0 17 3 1 #"/"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"0))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 1 #" "
0 0 17 3 2 #"/:"
0 0 17 3 1 #" "
0 0 17 3 8 #"division"
0 0 17 3 1 #" "
0 0 17 3 2 #"by"
0 0 17 3 5 #" zero"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; getaway: "
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; special syntaxes, often they signal special meaning as well"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";    special sytax doesnt always signal special meaning"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; usually has to do with controls as to when expressions are evaluat"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; both are equivalent; plus can be re-written as a function "
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; plus"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")  "
0 0 17 3 4 #"; 15"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 9 #")        "
0 0 17 3 3 #"; 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; binary plus"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 7 #"my-plus"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 2 #"y)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  ("
0 0 17 3 1 #"-"
0 0 17 3 2 #" ("
0 0 17 3 1 #"-"
0 0 17 3 1 #"("
0 0 17 3 1 #"x"
0 0 17 3 2 #") "
0 0 17 3 1 #"-"
0 0 17 3 1 #"("
0 0 17 3 5 #"y))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; python"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; and: special semantics, special syntax"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; + : function call semantics, special syntax"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; in: function call semantics, special syntax"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; list"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; a function, evaluates the expression, returns a list"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; in the end, shows the list ..."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"hello"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"star"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"outline"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(list 123 \""
0 0 17 3 5 #"hello"
0 0 17 3 2 #"\" "
0 6           4 17 445
(
 #"(#(struct:translate 7.725424859373678 38.471044214690664 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"32.72542485937369 -23.776412907378838 0 0) #(struct:pulled-point 0 0"
 #" -7.725424859373678 -23.77641290737884 0 0) #(struct:pulled-point 0 "
 #"0 25 0 0 0) #(struct:pulled-point 0 0 12.500000000000007 -38.4710442"
 #"14690664 0 0)) outline \"blue\")) #(struct:bb 40.450849718747364 38."
 #"471044214690664 38.471044214690664) #f)"
) 0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; note: no memory model..."
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; consequence:"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";    cannot distinguish different lists"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";    good: eliminate some of the problems otherwise ..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; identical"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 6 #"))    "
0 0 17 3 12 #"; (list 0 7)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 25 #")                        "
0 0 17 3 12 #"; (list 0 7)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 28 #")                           "
0 0 17 3 3 #"; 9"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; map list -> list"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; a function that takes"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";     a function"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";     a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; apply function to each element in list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"sqr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 4 #"\342\230\205 "
0 0 17 3 1 #"("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 3 #"sqr"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"random"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 7 #"random "
0 0 17 3 2 #"10"
0 0 17 3 1 #")"
0 0 17 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 3 #"sqr"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #" ("
0 0 17 3 6 #"random"
0 0 17 3 1 #" "
0 0 17 3 5 #"10)))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 3 #"sqr"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"6))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 3 #"sqr"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #") ("
0 0 17 3 3 #"sqr"
0 0 17 3 1 #" "
0 0 17 3 3 #"6))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"9"
0 0 17 3 2 #" ("
0 0 17 3 3 #"sqr"
0 0 17 3 1 #" "
0 0 17 3 3 #"6))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"9"
0 0 17 3 1 #" "
0 0 17 3 3 #"36)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";\342\230\205 (map - (list (random 10) (random 10)))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";\342\200\242 (map - (list 4 (random 10)))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";\342\200\242 (map - (list 4 2))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";\342\200\242 (list (- 4) (- 2))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";\342\200\242 (list -4 (- 2))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";\342\200\242 (list -4 -2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; idea of mapreduce"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; if transformation does work independently of each other"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; can be parallized easily since no side-effects (mutation)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; the move to stateless programming..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 14 3 8 #"parallel"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; \342\230\205 (map - (list (random 10) (random 10)))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; \342\200\242 (map - (list 6 7))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; \342\200\242 (list (- 6) (- 7))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; \342\200\242 (list -6 -7)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; side-effect"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";  when one expression does something, its detectable with another e"
 #"xpression"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"oval"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"rotate"
0 0 24 3 1 #" "
0 0 14 3 5 #"angle"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ellipse"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"oval"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 6 #"(list "
0 6           4 17 122
(
 #"(#(struct:translate 0 -0.0 #(struct:translate 5 10 #(struct:ellipse "
 #"10 20 0 outline \"red\"))) #(struct:bb 10 20.0 20.0) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 228
(
 #"(#(struct:translate -2.7157487412607164 2.8536241508155875 #(struct:"
 #"translate 9.330127018922193 6.160254037844387 #(struct:ellipse 10 20"
 #" 30 outline \"red\"))) #(struct:bb 13.228756555322953 18.02775637731"
 #"995 18.02775637731995) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 231
(
 #"(#(struct:translate -2.1463758491844125 5.944505296583668 #(struct:t"
 #"ranslate 11.160254037844386 0.6698729810778081 #(struct:ellipse 10 2"
 #"0 60 outline \"red\"))) #(struct:bb 18.027756377319946 13.2287565553"
 #"22953 13.228756555322953) #f)"
) 0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; range begin end step -> list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (list 0 1 2 3 4 5 6 7 8 9)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"oval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"(list "
0 6           4 17 122
(
 #"(#(struct:translate 0 -0.0 #(struct:translate 5 10 #(struct:ellipse "
 #"10 20 0 outline \"red\"))) #(struct:bb 10 20.0 20.0) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 228
(
 #"(#(struct:translate -0.7958809140253882 0.44530558265656595 #(struct"
 #":translate 5.852530917935309 9.526168267179164 #(struct:ellipse 10 2"
 #"0 5 outline \"red\"))) #(struct:bb 10.113300007819841 19.94294769967"
 #"146 19.94294769967146) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 228
(
 #"(#(struct:translate -1.4392633444139316 0.9064403763560325 #(struct:"
 #"translate 6.660520541730343 8.979836641787427 #(struct:ellipse 10 20"
 #" 10 outline \"red\"))) #(struct:bb 10.442514394632823 19.77255403628"
 #"692 19.77255403628692) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 228
(
 #"(#(struct:translate -1.9383992337398954 1.38039762591454 #(struct:tr"
 #"anslate 7.417819582470549 8.365163037378078 #(struct:ellipse 10 20 1"
 #"5 outline \"red\"))) #(struct:bb 10.958840697461307 19.4911213265852"
 #"37 19.491121326585237) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 229
(
 #"(#(struct:translate -2.3071816469904487 1.8644396928672116 #(struct:"
 #"translate 8.11866453718623 7.686825491230742 #(struct:ellipse 10 20 "
 #"20 outline \"red\"))) #(struct:bb 11.622965780391564 19.102530368195"
 #"907 19.102530368195907) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 229
(
 #"(#(struct:translate -2.5613141550126137 2.3561692162748056 #(struct:"
 #"translate 8.757721552590244 6.949986561663001 #(struct:ellipse 10 20"
 #" 25 outline \"red\"))) #(struct:bb 12.39281479515526 18.612311555875"
 #"614 18.612311555875614) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 228
(
 #"(#(struct:translate -2.7157487412607164 2.8536241508155875 #(struct:"
 #"translate 9.330127018922193 6.160254037844387 #(struct:ellipse 10 20"
 #" 30 outline \"red\"))) #(struct:bb 13.228756555322953 18.02775637731"
 #"995 18.02775637731995) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 226
(
 #"(#(struct:translate -2.783528797124143 3.355402894126219 #(struct:tr"
 #"anslate 9.83152458495542 5.323638261134687 #(struct:ellipse 10 20 35"
 #" outline \"red\"))) #(struct:bb 14.09599157566255 17.358082310521812"
 #" 17.358082310521812) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 230
(
 #"(#(struct:translate -2.7755724463178817 3.860828127331569 #(struct:t"
 #"ranslate 10.258098312460284 4.446506382757084 #(struct:ellipse 10 20"
 #" 40 outline \"red\"))) #(struct:bb 14.965051732284806 16.61466902017"
 #"7306 16.614669020177306) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 229
(
 #"(#(struct:translate -2.700907567377265 4.370160244488211 #(struct:tr"
 #"anslate 10.606601717798213 3.535533905932738 #(struct:ellipse 10 20 "
 #"45 outline \"red\"))) #(struct:bb 15.811388300841898 15.811388300841"
 #"898 15.811388300841898) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 229
(
 #"(#(struct:translate -2.5670479695338226 4.8848719848719 #(struct:tra"
 #"nslate 10.874382479622476 2.5976538812705035 #(struct:ellipse 10 20 "
 #"50 outline \"red\"))) #(struct:bb 16.614669020177303 14.965051732284"
 #"806 14.965051732284806) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 231
(
 #"(#(struct:translate -2.3803614693842423 5.407991645765775 #(struct:t"
 #"ranslate 11.059402624645148 1.6400041420655027 #(struct:ellipse 10 2"
 #"0 55 outline \"red\"))) #(struct:bb 17.358082310521816 14.0959915756"
 #"62556 14.095991575662556) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 231
(
 #"(#(struct:translate -2.1463758491844125 5.944505296583668 #(struct:t"
 #"ranslate 11.160254037844386 0.6698729810778081 #(struct:ellipse 10 2"
 #"0 60 outline \"red\"))) #(struct:bb 18.027756377319946 13.2287565553"
 #"22953 13.228756555322953) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 231
(
 #"(#(struct:translate -1.870013401132189 6.501763715353884 #(struct:tr"
 #"anslate 11.176169179069996 -0.3053563177762548 #(struct:ellipse 10 2"
 #"0 65 outline \"red\"))) #(struct:bb 18.612311555875614 12.3928147951"
 #"55259 12.392814795155259) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 231
(
 #"(#(struct:translate -1.5557617403894763 7.0897445608686365 #(struct:"
 #"translate 11.107026924487428 -1.2782616706728533 #(struct:ellipse 10"
 #" 20 70 outline \"red\"))) #(struct:bb 19.1025303681959 11.6229657803"
 #"91565 11.622965780391565) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 231
(
 #"(#(struct:translate -1.207792825110669 7.7208590291507875 #(struct:t"
 #"ranslate 10.953353488403287 -2.241438680420134 #(struct:ellipse 10 2"
 #"0 75 outline \"red\"))) #(struct:bb 19.491121326585237 10.9588406974"
 #"61307 10.958840697461307) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 232
(
 #"(#(struct:translate -0.8300414003132701 8.408814185708147 #(struct:t"
 #"ranslate 10.716318418456732 -3.1875569883917354 #(struct:ellipse 10 "
 #"20 80 outline \"red\"))) #(struct:bb 19.772554036286923 10.442514394"
 #"632823 10.442514394632823) #f)"
) 0 0 17 3 1 #" "
0 6           4 17 229
(
 #"(#(struct:translate -0.42625184482001544 9.166066066892066 #(struct:"
 #"translate 10.397725694655746 -4.109416062982146 #(struct:ellipse 10 "
 #"20 85 outline \"red\"))) #(struct:bb 19.94294769967146 10.1133000078"
 #"1984 10.11330000781984) #f)"
) 0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Note + does no overloads"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   ("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"4))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; +: expects a number, but received (list 3 2 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; apply func list -> retTypeOfFunc"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; apply list as argument to a function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 14 3 8 #"parallel"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\230\205"
0 0 17 3 2 #" ("
0 0 17 3 5 #"apply"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"4))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" ("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"4)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; \342\200\242"
0 0 17 3 2 #" 9"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"oval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"oval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 6           4 17 4514
(
 #"(#(struct:scale 20 20 #(struct:overlay #(struct:translate 0.08519683"
 #"169226866 0 #(struct:overlay #(struct:translate 0.14071635485084322 "
 #"0 #(struct:overlay #(struct:translate 0.19429547919466827 0 #(struct"
 #":overlay #(struct:translate 0.2451094061601431 0 #(struct:overlay #("
 #"struct:translate 0.292277589277834 0 #(struct:overlay #(struct:trans"
 #"late 0.3348370333990651 0 #(struct:overlay #(struct:translate 0.3717"
 #"066451722566 0 #(struct:overlay #(struct:translate 0.401640359667702"
 #"3 0 #(struct:overlay #(struct:translate 0.423168284278546 0 #(struct"
 #":overlay #(struct:translate 0.4345300783111279 0 #(struct:overlay #("
 #"struct:translate 0.43361751016979877 0 #(struct:overlay #(struct:tra"
 #"nslate 0.4179708800838462 0 #(struct:overlay #(struct:translate 0.38"
 #"492450738184836 0 #(struct:overlay #(struct:translate 0.332062541465"
 #"12837 0 #(struct:overlay #(struct:translate 0.25816315141424173 0 #("
 #"struct:overlay #(struct:translate 0.164607193406491 0 #(struct:overl"
 #"ay #(struct:translate 0.0566500039099207 0 #(struct:translate 0 -0.0"
 #" #(struct:translate 5 10 #(struct:ellipse 10 20 0 outline \"red\")))"
 #") #(struct:translate 0 0.028526150164269737 #(struct:translate -0.79"
 #"58809140253882 0.44530558265656595 #(struct:translate 5.852530917935"
 #"309 9.526168267179164 #(struct:ellipse 10 20 5 outline \"red\"))))))"
 #" #(struct:translate 0 0.11372298185654017 #(struct:translate -1.4392"
 #"633444139316 0.9064403763560325 #(struct:translate 6.660520541730343"
 #" 8.979836641787427 #(struct:ellipse 10 20 10 outline \"red\")))))) #"
 #"(struct:translate 0 0.2544393367073816 #(struct:translate -1.9383992"
 #"337398954 1.38039762591454 #(struct:translate 7.417819582470549 8.36"
 #"5163037378078 #(struct:ellipse 10 20 15 outline \"red\")))))) #(stru"
 #"ct:translate 0 0.44873481590204634 #(struct:translate -2.30718164699"
 #"04487 1.8644396928672116 #(struct:translate 8.11866453718623 7.68682"
 #"5491230742 #(struct:ellipse 10 20 20 outline \"red\")))))) #(struct:"
 #"translate 0 0.693844222062193 #(struct:translate -2.5613141550126137"
 #" 2.3561692162748056 #(struct:translate 8.757721552590244 6.949986561"
 #"663001 #(struct:ellipse 10 20 25 outline \"red\")))))) #(struct:tran"
 #"slate 0 0.9861218113400252 #(struct:translate -2.7157487412607164 2."
 #"8536241508155875 #(struct:translate 9.330127018922193 6.160254037844"
 #"387 #(struct:ellipse 10 20 30 outline \"red\")))))) #(struct:transla"
 #"te 0 1.3209588447390939 #(struct:translate -2.783528797124143 3.3554"
 #"02894126219 #(struct:translate 9.83152458495542 5.323638261134687 #("
 #"struct:ellipse 10 20 35 outline \"red\")))))) #(struct:translate 0 1"
 #".692665489911347 #(struct:translate -2.7755724463178817 3.8608281273"
 #"31569 #(struct:translate 10.258098312460284 4.446506382757084 #(stru"
 #"ct:ellipse 10 20 40 outline \"red\")))))) #(struct:translate 0 2.094"
 #"305849579051 #(struct:translate -2.700907567377265 4.370160244488211"
 #" #(struct:translate 10.606601717798213 3.535533905932738 #(struct:el"
 #"lipse 10 20 45 outline \"red\")))))) #(struct:translate 0 2.51747413"
 #"3857597 #(struct:translate -2.5670479695338226 4.8848719848719 #(str"
 #"uct:translate 10.874382479622476 2.5976538812705035 #(struct:ellipse"
 #" 10 20 50 outline \"red\")))))) #(struct:translate 0 2.9520042121687"
 #"22 #(struct:translate -2.3803614693842423 5.407991645765775 #(struct"
 #":translate 11.059402624645148 1.6400041420655027 #(struct:ellipse 10"
 #" 20 55 outline \"red\")))))) #(struct:translate 0 3.3856217223385237"
 #" #(struct:translate -2.1463758491844125 5.944505296583668 #(struct:t"
 #"ranslate 11.160254037844386 0.6698729810778081 #(struct:ellipse 10 2"
 #"0 60 outline \"red\")))))) #(struct:translate 0 3.8035926024223707 #"
 #"(struct:translate -1.870013401132189 6.501763715353884 #(struct:tran"
 #"slate 11.176169179069996 -0.3053563177762548 #(struct:ellipse 10 20 "
 #"65 outline \"red\")))))) #(struct:translate 0 4.188517109804217 #(st"
 #"ruct:translate -1.5557617403894763 7.0897445608686365 #(struct:trans"
 #"late 11.107026924487428 -1.2782616706728533 #(struct:ellipse 10 20 7"
 #"0 outline \"red\")))))) #(struct:translate 0 4.520579651269347 #(str"
 #"uct:translate -1.207792825110669 7.7208590291507875 #(struct:transla"
 #"te 10.953353488403287 -2.241438680420134 #(struct:ellipse 10 20 75 o"
 #"utline \"red\")))))) #(struct:translate 0 4.778742802683588 #(struct"
 #":translate -0.8300414003132701 8.408814185708147 #(struct:translate "
 #"10.716318418456732 -3.1875569883917354 #(struct:ellipse 10 20 80 out"
 #"line \"red\")))))) #(struct:translate 0 4.94334999609008 #(struct:tr"
 #"anslate -0.42625184482001544 9.166066066892066 #(struct:translate 10"
 #".397725694655746 -4.109416062982146 #(struct:ellipse 10 20 85 outlin"
 #"e \"red\")))))) #(struct:bb 398.8589539934292 400.0 400.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; referential transparency"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; An"
0 0 17 3 1 #" "
0 0 17 3 10 #"expression"
0 0 17 3 1 #" "
0 0 17 3 3 #"is "
0 0 17 3 4 #"said"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 13 #"referentially"
0 0 17 3 1 #" "
0 0 17 3 11 #"transparent"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 3 #"can"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 9 #" replaced"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; with"
0 0 17 3 1 #" "
0 0 17 3 3 #"its"
0 0 17 3 1 #" "
0 0 17 3 13 #"corresponding"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 7 #"without"
0 0 17 3 1 #" "
0 0 17 3 8 #"changing"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 7 #"program"
0 0 17 3 1 #"'"
0 0 17 3 11 #"s behavior."
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; therefore -> deterministic, same output "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; random has side-effect"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; violates referential transparency"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; note this define fails because function has to have arguments"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; since a function with no argument is equivalent to"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; a"
0 0 17 3 1 #" "
0 0 17 3 8 #"constant"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 3 #"as "
0 0 17 3 6 #"output"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"its"
0 0 17 3 1 #" "
0 0 17 3 14 #"body evaluated"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"r"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; define: expects at least one variable after the function name, but"
 #" found none"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #"; the function r cannot be replaced with the value, as the program b"
 #"ehavior might change depending on random"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #"; breaks referential transparency"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"whatever\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 6"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"whatever\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; 3 triangle same"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stack-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; bottom 2 triangle same "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stack-2"
0 0 24 3 1 #" "
0 0 14 3 2 #"i1"
0 0 24 3 1 #" "
0 0 14 3 2 #"i2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 2 #"i1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 2 #"i2"
0 0 24 3 1 #" "
0 0 14 3 2 #"i2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 8 #"triangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"random"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stack-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"S-1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")) )]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; random violates referential opaqueness"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; case 1: since arguments are evaluated before function,"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; and that one color dictates the color of stacked triangle"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; color"
0 0 17 3 26 #" is same for all triangles"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 14 3 8 #"parallel"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"hide"
0 0 24 3 2 #" ("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 8 #"triangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"random"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 1 #" "
0 0 21 3 3 #"101"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stack-2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"S-2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"S-2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")) )]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; case 2 : since arguments evaluated before a function"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; and the color of bottom 2 and top 1 triangle may be different with"
 #" random"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #"; but the output has the property that"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";     every level is a triangle of same color"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 14 3 8 #"parallel"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"hide"
0 0 24 3 2 #" ("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"S-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
